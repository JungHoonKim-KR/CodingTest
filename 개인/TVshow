import java.io.*;
import java.util.*;


public class show {
    private static class TwoSat{
        int n ;
        boolean [] visited;
        List<Integer>[] graph, reversedGraph;
        Stack<Integer> stack;
        int [] scc;
        int sccCount;

        TwoSat(int n){
            this.n = n;
            graph = new ArrayList[2*n];
            reversedGraph = new ArrayList[2*n];
            for(int i =0; i<2*n; i++){
                graph[i] = new ArrayList<>();
                reversedGraph[i] = new ArrayList<>();
            }
        }

        public void addEdge(int var1, String sign1, int var2, String sign2, int var3, String sign3){

            int u1 = convertSign(var1,sign1);
            int u2 = convertSign(var2,sign2);
            int u3 = convertSign(var3,sign3);

            graph[negate(u1)].add(u2);
            graph[negate(u2)].add(u1);
            reversedGraph[u2].add(negate(u1));
            reversedGraph[u1].add(negate(u2));

            graph[negate(u2)].add(u3);
            graph[negate(u3)].add(u2);
            reversedGraph[u3].add(negate(u2));
            reversedGraph[u2].add(negate(u3));

            graph[negate(u3)].add(u1);
            graph[negate(u1)].add(u3);
            reversedGraph[u1].add(negate(u3));
            reversedGraph[u3].add(negate(u1));
        }

        private int convertSign(int var, String color){
            return color.equals("R")? 2*(var-1): 2*(var-1)+1;
        }
        private static int negate(int x) {
            return x%2==0? x+1 :x-1 ;
        }

        public int solve(){
            stack = new Stack<>();
            visited = new boolean[2*n];

            for(int i =0; i<2*n; i++){
                if(!visited[i]){
                    dfs1(i);
                }
            }
            Arrays.fill(visited,false);
            scc = new int[2*n];
            sccCount=0;
            while(!stack.isEmpty()){
                int u = stack.pop();
                if(!visited[u]){
                    dfs2(u, sccCount++);
                }
            }
            for(int i =0; i<n;i++){
                if(scc[2*i] == scc[2*i+1]) return -1;
            }
            return 1;
        }

        private void dfs1(int i) {
            visited[i] = true;
            for(int u:graph[i]){
                if(!visited[u]){
                    dfs1(u);
                }
            }
            stack.push(i);
        }
        private void dfs2(int u, int label) {
            visited[u]= true;
            scc[u] = label;
            for(int v:reversedGraph[u]){
                if(!visited[v]){
                    dfs2(v,label);
                }
            }
        }

    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new FileReader("show.inp"));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("show.out"));
        int testcase = Integer.parseInt(bufferedReader.readLine());

        for(int tc = 0; tc<testcase; tc++){
            StringTokenizer st =new StringTokenizer(bufferedReader.readLine());
            int variableNum = Integer.parseInt(st.nextToken());
            int clauseNum = Integer.parseInt(st.nextToken());
            TwoSat twoSat = new TwoSat(variableNum);
            for(int i = 0; i<clauseNum; i++){
                st = new StringTokenizer(bufferedReader.readLine());
                twoSat.addEdge(Integer.parseInt(st.nextToken()),st.nextToken()
                        ,Integer.parseInt(st.nextToken()),st.nextToken(),
                        Integer.parseInt(st.nextToken()),st.nextToken());
            }
            bufferedWriter.write(twoSat.solve()+"\n");
        }
        bufferedWriter.close();
    }
}
